from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
import pytesseract
from PIL import Image, ImageFilter, ImageOps, ImageEnhance
import time
import os
import re
import schedule

# ƒë∆∞·ªùng d·∫´n t·ªõi Tesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

def setup_driver():
    """
    Kh·ªüi t·∫°o tr√¨nh duy·ªát Chrome v·ªõi c√°c t√πy ch·ªçn c·∫ßn thi·∫øt.
    """
    options = Options()
    options.add_argument('--ignore-certificate-errors')
    return webdriver.Chrome(options=options)

def preprocess_captcha(image_path: str, output_path: str) -> Image.Image:
    """
    Ti·ªÅn x·ª≠ l√Ω ·∫£nh captcha ƒë·ªÉ t·ªëi ∆∞u cho OCR.
    - Chuy·ªÉn sang grayscale
    - Ph√≥ng to
    - TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n
    - L·ªçc nhi·ªÖu
    - Nh·ªã ph√¢n h√≥a
    """
    image = Image.open(image_path).convert("L")
    image = image.resize((image.width * 2, image.height * 2))
    image = ImageOps.autocontrast(image)
    image = image.filter(ImageFilter.MedianFilter())
    threshold = 180
    image = image.point(lambda p: p > threshold and 255)
    image.save(output_path)
    return image

def read_captcha(image: Image.Image) -> str:
    """
    Nh·∫≠n di·ªán m√£ captcha t·ª´ ·∫£nh ƒë√£ x·ª≠ l√Ω.
    Ch·ªâ l·∫•y 6 k√Ω t·ª± ch·ªØ th∆∞·ªùng v√† s·ªë.
    """
    raw_text = pytesseract.image_to_string(
        image,
        config='--psm 8 --oem 3 -c tessedit_char_whitelist=abcdefghijklmnopqrstuvwxyz0123456789'
    ).strip()

    filtered_text = re.sub(r'[^a-z0-9]', '', raw_text.lower())
    return filtered_text[-6:] if len(filtered_text) >= 6 else filtered_text.ljust(6, '_')

def fill_form_and_submit(driver, captcha_text: str):
    """
    Nh·∫≠p th√¥ng tin bi·ªÉn s·ªë, lo·∫°i xe, captcha v√† nh·∫•n t√¨m ki·∫øm.
    """
    plate_number_input = driver.find_element(By.XPATH, '//*[@id="formBSX"]/div[2]/div[1]/input')
    plate_number_input.send_keys("43A12345")

    vehicle_type_select = driver.find_element(By.XPATH, '//*[@id="formBSX"]/div[2]/div[2]/select')
    select = Select(vehicle_type_select)
    select.select_by_visible_text("√î t√¥")

    captcha_input = driver.find_element(By.NAME, "txt_captcha")
    captcha_input.send_keys(captcha_text)

    search_button = driver.find_element(By.XPATH, '//*[@id="formBSX"]/div[2]/input[1]')
    search_button.click()

def get_violation_result(driver):
    """
    L·∫•y k·∫øt qu·∫£ tra c·ª©u ph·∫°t ngu·ªôi n·∫øu c√≥.
    """
    try:
        result_div = driver.find_element(By.XPATH, '//*[@id="bodyPrint123"]')
        result_text = result_div.text.strip()

        if result_text:
            print("üîç K·∫øt qu·∫£ ph·∫°t ngu·ªôi:\n")
            print(result_text)
        else:
            print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ph·∫°t ngu·ªôi.")
    except Exception as e:
        print("‚ùå L·ªói khi l·∫•y k·∫øt qu·∫£ ph·∫°t ngu·ªôi:", e)

def check_vehicle_violation():
    """
    H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh tra c·ª©u ph·∫°t ngu·ªôi.
    """
    driver = setup_driver()
    captcha_path = "captcha.png"
    processed_path = "processed_captcha.png"

    try:
        driver.get("https://www.csgt.vn/tra-cuu-phuong-tien-vi-pham.html")
        time.sleep(2)

        captcha_element = driver.find_element(By.ID, "imgCaptcha")
        captcha_element.screenshot(captcha_path)

        processed_image = preprocess_captcha(captcha_path, processed_path)
        captcha_text = read_captcha(processed_image)
        print("M√£ Captcha ƒë·ªçc ƒë∆∞·ª£c:", captcha_text)

        fill_form_and_submit(driver, captcha_text)
        time.sleep(5)

        get_violation_result(driver)

    except Exception as e:
        print("‚ùå L·ªói:", e)

    finally:
        driver.quit()
        for f in [captcha_path, processed_path]:
            if os.path.exists(f):
                os.remove(f)


# L·∫≠p l·ªãch ch·∫°y h√†ng ng√†y
schedule.every().day.at("06:00").do(check_vehicle_violation)
schedule.every().day.at("12:00").do(check_vehicle_violation)

# V√≤ng l·∫∑p ki·ªÉm tra l·ªãch
while True:
    schedule.run_pending()
    time.sleep(60)